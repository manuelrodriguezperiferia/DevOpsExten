"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  useChat: () => useChat,
  useCompletion: () => useCompletion
});
module.exports = __toCommonJS(src_exports);

// src/use-chat.ts
var import_ui_utils = require("@ai-sdk/ui-utils");
var import_solid_js = require("solid-js");
var import_solid_swr_store = require("solid-swr-store");
var import_swr_store = require("swr-store");
var uniqueId = 0;
var store = {};
var chatApiStore = (0, import_swr_store.createSWRStore)({
  get: async (key) => {
    var _a;
    return (_a = store[key]) != null ? _a : [];
  }
});
function useChat({
  api = "/api/chat",
  id,
  initialMessages = [],
  initialInput = "",
  sendExtraMessageFields,
  experimental_onFunctionCall,
  onResponse,
  onFinish,
  onError,
  credentials,
  headers,
  body,
  streamMode,
  generateId = import_ui_utils.generateId
} = {}) {
  const chatId = id || `chat-${uniqueId++}`;
  const key = `${api}|${chatId}`;
  const messages = (0, import_solid_swr_store.useSWRStore)(chatApiStore, () => [key], {
    initialData: initialMessages
  });
  const mutate = (data) => {
    store[key] = data;
    return chatApiStore.mutate([key], {
      status: "success",
      data
    });
  };
  const [error, setError] = (0, import_solid_js.createSignal)(void 0);
  const [streamData, setStreamData] = (0, import_solid_js.createSignal)(
    void 0
  );
  const [isLoading, setIsLoading] = (0, import_solid_js.createSignal)(false);
  let abortController = null;
  async function triggerRequest(messagesSnapshot, { options, data } = {}) {
    try {
      setError(void 0);
      setIsLoading(true);
      abortController = new AbortController();
      const getCurrentMessages = () => chatApiStore.get([key], {
        shouldRevalidate: false
      });
      const previousMessages = getCurrentMessages();
      mutate(messagesSnapshot);
      let chatRequest = {
        messages: messagesSnapshot,
        options,
        data
      };
      await (0, import_ui_utils.processChatStream)({
        getStreamedResponse: async () => {
          var _a;
          const existingData = (_a = streamData()) != null ? _a : [];
          return await (0, import_ui_utils.callChatApi)({
            api,
            messages: sendExtraMessageFields ? chatRequest.messages : chatRequest.messages.map(
              ({
                role,
                content,
                name,
                data: data2,
                annotations,
                function_call
              }) => ({
                role,
                content,
                ...name !== void 0 && { name },
                ...data2 !== void 0 && { data: data2 },
                ...annotations !== void 0 && { annotations },
                // outdated function/tool call handling (TODO deprecate):
                ...function_call !== void 0 && { function_call }
              })
            ),
            body: {
              data: chatRequest.data,
              ...body,
              ...options == null ? void 0 : options.body
            },
            streamMode,
            headers: {
              ...headers,
              ...options == null ? void 0 : options.headers
            },
            abortController: () => abortController,
            credentials,
            onResponse,
            onUpdate(merged, data2) {
              mutate([...chatRequest.messages, ...merged]);
              setStreamData([...existingData, ...data2 != null ? data2 : []]);
            },
            onFinish,
            restoreMessagesOnFailure() {
              if (previousMessages.status === "success") {
                mutate(previousMessages.data);
              }
            },
            generateId
          });
        },
        experimental_onFunctionCall,
        updateChatRequest(newChatRequest) {
          chatRequest = newChatRequest;
        },
        getCurrentMessages: () => getCurrentMessages().data
      });
      abortController = null;
    } catch (err) {
      if (err.name === "AbortError") {
        abortController = null;
        return null;
      }
      if (onError && err instanceof Error) {
        onError(err);
      }
      setError(err);
    } finally {
      setIsLoading(false);
    }
  }
  const append = async (message, options) => {
    var _a;
    if (!message.id) {
      message.id = generateId();
    }
    return triggerRequest(
      ((_a = messages()) != null ? _a : []).concat(message),
      options
    );
  };
  const reload = async (options) => {
    const messagesSnapshot = messages();
    if (!messagesSnapshot || messagesSnapshot.length === 0)
      return null;
    const lastMessage = messagesSnapshot[messagesSnapshot.length - 1];
    if (lastMessage.role === "assistant") {
      return triggerRequest(messagesSnapshot.slice(0, -1), options);
    }
    return triggerRequest(messagesSnapshot, options);
  };
  const stop = () => {
    if (abortController) {
      abortController.abort();
      abortController = null;
    }
  };
  const setMessages = (messages2) => {
    mutate(messages2);
  };
  const [input, setInput] = (0, import_solid_js.createSignal)(initialInput);
  const handleSubmit = (e, options = {}) => {
    e.preventDefault();
    const inputValue = input();
    if (!inputValue)
      return;
    append(
      {
        content: inputValue,
        role: "user",
        createdAt: /* @__PURE__ */ new Date()
      },
      options
    );
    setInput("");
  };
  return {
    messages,
    append,
    error,
    reload,
    stop,
    setMessages,
    input,
    setInput,
    handleSubmit,
    isLoading,
    data: streamData
  };
}

// src/use-completion.ts
var import_ui_utils2 = require("@ai-sdk/ui-utils");
var import_solid_js2 = require("solid-js");
var import_solid_swr_store2 = require("solid-swr-store");
var import_swr_store2 = require("swr-store");
var uniqueId2 = 0;
var store2 = {};
var completionApiStore = (0, import_swr_store2.createSWRStore)({
  get: async (key) => {
    var _a;
    return (_a = store2[key]) != null ? _a : [];
  }
});
function useCompletion({
  api = "/api/completion",
  id,
  initialCompletion = "",
  initialInput = "",
  credentials,
  headers,
  body,
  streamMode,
  onResponse,
  onFinish,
  onError
} = {}) {
  const completionId = id || `completion-${uniqueId2++}`;
  const key = `${api}|${completionId}`;
  const data = (0, import_solid_swr_store2.useSWRStore)(completionApiStore, () => [key], {
    initialData: initialCompletion
  });
  const mutate = (data2) => {
    store2[key] = data2;
    return completionApiStore.mutate([key], {
      data: data2,
      status: "success"
    });
  };
  const completion = data;
  const [error, setError] = (0, import_solid_js2.createSignal)(void 0);
  const [streamData, setStreamData] = (0, import_solid_js2.createSignal)(
    void 0
  );
  const [isLoading, setIsLoading] = (0, import_solid_js2.createSignal)(false);
  let abortController = null;
  const complete = async (prompt, options) => {
    var _a;
    const existingData = (_a = streamData()) != null ? _a : [];
    return (0, import_ui_utils2.callCompletionApi)({
      api,
      prompt,
      credentials,
      headers: {
        ...headers,
        ...options == null ? void 0 : options.headers
      },
      body: {
        ...body,
        ...options == null ? void 0 : options.body
      },
      streamMode,
      setCompletion: mutate,
      setLoading: setIsLoading,
      setError,
      setAbortController: (controller) => {
        abortController = controller;
      },
      onResponse,
      onFinish,
      onError,
      onData: (data2) => {
        setStreamData([...existingData, ...data2 != null ? data2 : []]);
      }
    });
  };
  const stop = () => {
    if (abortController) {
      abortController.abort();
      abortController = null;
    }
  };
  const setCompletion = (completion2) => {
    mutate(completion2);
  };
  const [input, setInput] = (0, import_solid_js2.createSignal)(initialInput);
  const handleSubmit = (e) => {
    e.preventDefault();
    const inputValue = input();
    if (!inputValue)
      return;
    return complete(inputValue);
  };
  return {
    completion,
    complete,
    error,
    stop,
    setCompletion,
    input,
    setInput,
    handleSubmit,
    isLoading,
    data: streamData
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useChat,
  useCompletion
});
//# sourceMappingURL=index.js.map